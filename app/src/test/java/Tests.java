/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import mythread.*;
import lock.*;
import peterson.*;
import bakery.*;
import java.io.ByteArrayOutputStream; 
import java.io.PrintStream; 

public class Tests {

	private static final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	//private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
	private static final PrintStream originalOut = System.out;
	//private final PrintStream originalErr = System.err;
	
	@BeforeAll
	public static void setUpStreams() {
		System.setOut(new PrintStream(outContent));
		// System.setErr(new PrintStream(errContent));
	}
	
	@Test
	@DisplayName("Peterson")
	public void test_peterson() {
		MyThread t[];
		int N = 2;
		t = new MyThread[N];
		Lock lock = new Peterson(); //compléter avec un algorithme mutex
		for(int i=0; i<N; i++){
			t[i] = new MyThread(i,lock);
			t[i].start();
		}
		for(int i=0; i<N; i++){
			try {
				t[i].join();
			} catch (Exception e) {
				System.err.println(e.toString());
			}
		}
		String output = outContent.toString();
		System.err.println(output);
		for (int i = 0; i < output.length(); i = i + 2) {
			assertEquals(output.charAt(i), output.charAt(i + 1));
		}
	}

	
	@Test
	@DisplayName("Bakery")
	public void test_bakery() {
		MyThread t[];
		int N = 5;
		t = new MyThread[N];
		Lock lock = new Bakery(N); //compléter avec un algorithme mutex
		for(int i=0; i<N; i++){
			t[i] = new MyThread(i,lock);
			t[i].start();
		}
		for(int i=0; i<N; i++){
			try {
				t[i].join();
			} catch (Exception e) {
				System.err.println(e.toString());
			}
		}
		String output = outContent.toString();
		System.err.println(output);
		for (int i = 0; i < output.length(); i = i + 2) {
			assertEquals(output.charAt(i), output.charAt(i + 1));
		}
	}


	@AfterAll
	public static void restoreStreams() {
		System.setOut(originalOut);
		// System.setErr(originalErr);
	}

}
